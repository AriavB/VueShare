type User {
    _id: ID # automatically created id associated with every data added to mongoDB  
    username: String! @unique  # ! to show its required
    email: String!
    password: String!
    avatar: String
    joinDate: String # dates are converted to string in graphQL
    favorites: [Post]
}

type Post {
    _id: ID
    title: String!
    imageUrl: String!
    categories: [String]!
    description: String!
    createdDate: String
    likes: Int
    createdBy: User!
    messages: [Message]
}

type Mutation {
    addPost(title: String!, imageUrl: String!, categories: [String]!, description: String!, creatorId: ID!): Post!
    addPostMessage(messageBody: String!, userId: ID!, postId: ID!): Message!
    updateUserPost(postId: ID!, userId: ID!, title: String!, imageUrl: String!, categories: [String]!, description: String!): Post!
    deleteUserPost(postId: ID!): Post!
    signinUser(username: String!, password: String!): Token
    signupUser(username: String!, email: String!, password: String!): Token
    likePost(postId: ID!, username: String!): LikesFaves!
    unlikePost(postId: ID!, username: String!): LikesFaves!
}

type Query {
    getCurrentUser: User
    getUserPosts(userId: ID!): [Post] 
    getPosts: [Post]
    getPost(postId: ID!): Post
    infiniteScrollPosts(pageNum: Int!, pageSize: Int!): PostsPage
    searchPosts(searchTerm: String): [Post]
} 

type Message {
    _id: ID
    messageBody: String!
    messageDate: String
    messageUser: User
}

type Token {
    token: String!
}

type PostsPage {
    posts: [Post]
    hasMore: Boolean
}

type LikesFaves {
    likes: Int
    favorites: [Post]
}